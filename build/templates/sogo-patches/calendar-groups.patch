--- SoObjects/Appointments/SOGoAppointmentFolder.m.orig	2025-10-13 22:12:35
+++ SoObjects/Appointments/SOGoAppointmentFolder.m	2025-10-13 22:13:16
@@ -443,10 +443,85 @@
       if (dict && [[dict objectForKey: @"isGroup"] boolValue])
         {
           id <SOGoSource> source;
+          NSString *groupMembersStr;
 
           source = [[SOGoUserManager sharedUserManager] sourceWithID: [dict objectForKey: @"SOGoSource"]];
-          if ([source conformsToProtocol:@protocol(SOGoMembershipSource)])
+
+          // Check for SQL-based groups with groupMembers field
+          groupMembersStr = [dict objectForKey: @"groupMembers"];
+
+          if (groupMembersStr && [groupMembersStr length] > 0)
             {
+              // SQL group - parse groupMembers field (space-separated email list)
+              NSArray *memberEmails;
+              NSString *memberEmail, *trimmedEmail;
+              SOGoUser *memberUser;
+              NSDictionary *memberDict;
+              NSMutableSet *processedEmails;
+              int j;
+
+              // Support both comma and space separators
+              groupMembersStr = [groupMembersStr stringByReplacingOccurrencesOfString: @"," withString: @" "];
+              memberEmails = [groupMembersStr componentsSeparatedByString: @" "];
+              allUsers = [NSMutableArray arrayWithCapacity: [memberEmails count]];
+              processedEmails = [NSMutableSet setWithCapacity: [memberEmails count]];
+
+              for (j = 0; j < [memberEmails count]; j++)
+                {
+                  memberEmail = [memberEmails objectAtIndex: j];
+                  trimmedEmail = [memberEmail stringByTrimmingCharactersInSet: [NSCharacterSet whitespaceAndNewlineCharacterSet]];
+
+                  if ([trimmedEmail length] == 0 || [processedEmails containsObject: trimmedEmail])
+                    continue;
+
+                  [processedEmails addObject: trimmedEmail];
+
+                  // Check if member is also a group (recursive resolution)
+                  memberDict = [[SOGoUserManager sharedUserManager] contactInfosForUserWithUIDorEmail: trimmedEmail
+                                                                                            inDomain: domain];
+
+                  if (memberDict && [[memberDict objectForKey: @"isGroup"] boolValue])
+                    {
+                      // Nested group - recursively resolve its members
+                      NSString *nestedGroupMembers = [memberDict objectForKey: @"groupMembers"];
+                      if (nestedGroupMembers && [nestedGroupMembers length] > 0)
+                        {
+                          NSArray *nestedEmails;
+                          NSString *nestedEmail, *trimmedNestedEmail;
+                          int k;
+
+                          nestedGroupMembers = [nestedGroupMembers stringByReplacingOccurrencesOfString: @"," withString: @" "];
+                          nestedEmails = [nestedGroupMembers componentsSeparatedByString: @" "];
+
+                          for (k = 0; k < [nestedEmails count]; k++)
+                            {
+                              nestedEmail = [nestedEmails objectAtIndex: k];
+                              trimmedNestedEmail = [nestedEmail stringByTrimmingCharactersInSet: [NSCharacterSet whitespaceAndNewlineCharacterSet]];
+
+                              if ([trimmedNestedEmail length] > 0 && ![processedEmails containsObject: trimmedNestedEmail])
+                                {
+                                  [processedEmails addObject: trimmedNestedEmail];
+                                  memberUser = [SOGoUser userWithLogin: trimmedNestedEmail roles: nil];
+                                  if (memberUser)
+                                    [allUsers addObject: memberUser];
+                                }
+                            }
+                        }
+                    }
+                  else
+                    {
+                      // Regular user
+                      memberUser = [SOGoUser userWithLogin: trimmedEmail roles: nil];
+                      if (memberUser)
+                        [allUsers addObject: memberUser];
+                    }
+                }
+
+              // Remove active user to prevent self-invitation
+              [allUsers removeObject: [context activeUser]];
+            }
+          else if ([source conformsToProtocol:@protocol(SOGoMembershipSource)])
+            {
               NSArray *members;
 
               members = [(id<SOGoMembershipSource>)(source) membersForGroupWithUID: [dict objectForKey: @"c_uid"]];

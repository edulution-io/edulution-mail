--- a/UI/Contacts/UIxContactView.m
+++ b/UI/Contacts/UIxContactView.m
@@ -395,8 +395,57 @@
 
   if ([[dict objectForKey: @"isGroup"] boolValue])
     {
-      if ([source conformsToProtocol:@protocol(SOGoMembershipSource)])
+      NSString *groupMembersStr;
+
+      // Check for SQL-based groups with groupMembers field
+      groupMembersStr = [dict objectForKey: @"groupMembers"];
+
+      if (groupMembersStr && [groupMembersStr length] > 0)
         {
+          // SQL group - parse groupMembers field (space-separated email list)
+          NSArray *memberEmails;
+          NSString *memberEmail, *trimmedEmail;
+          NSDictionary *memberContactInfo;
+
+          // Support both comma and space separators
+          groupMembersStr = [groupMembersStr stringByReplacingOccurrencesOfString: @"," withString: @" "];
+          memberEmails = [groupMembersStr componentsSeparatedByString: @" "];
+          allUsersData = [NSMutableArray arrayWithCapacity: [memberEmails count]];
+
+          for (i = 0; i < [memberEmails count]; i++)
+            {
+              memberEmail = [memberEmails objectAtIndex: i];
+              trimmedEmail = [memberEmail stringByTrimmingCharactersInSet: [NSCharacterSet whitespaceAndNewlineCharacterSet]];
+
+              if ([trimmedEmail length] == 0)
+                continue;
+
+              // Lookup user info for this email
+              memberContactInfo = [source lookupContactEntryWithUIDorEmail: trimmedEmail inDomain: nil];
+              if (memberContactInfo)
+                {
+                  NSString *memberCN = [memberContactInfo objectForKey: @"c_cn"];
+                  if (!memberCN || [memberCN length] == 0)
+                    memberCN = trimmedEmail;
+
+                  allUserEmails = [NSMutableArray arrayWithCapacity: 1];
+                  [allUserEmails addObject: [NSDictionary dictionaryWithObjectsAndKeys:
+                                                            trimmedEmail, @"value", @"work", @"type", nil]];
+
+                  userData = [NSDictionary dictionaryWithObjectsAndKeys:
+                                           trimmedEmail, @"c_uid",
+                                           memberCN, @"c_cn",
+                                           allUserEmails, @"emails", nil];
+                  [allUsersData addObject: userData];
+                }
+            }
+
+          dict = [NSDictionary dictionaryWithObject: allUsersData forKey: @"members"];
+          result = [self responseWithStatus: 200
+                                  andString: [dict jsonRepresentation]];
+        }
+      else if ([source conformsToProtocol:@protocol(SOGoMembershipSource)])
+        {
           allUsers = [(id<SOGoMembershipSource>)(source) membersForGroupWithUID: [dict objectForKey: @"c_uid"]];
           max = [allUsers count];
           allUsersData = [NSMutableArray arrayWithCapacity: max];
